<script>
/**
* 应用级别的配置，供所有页面公用
*/

// 脚本：regenerator.js
// 注意：仅用于注入类库函数，不允许存储页面组件等数据
const injectRef = Object.getPrototypeOf(global) || global

// 注入regeneratorRuntime
injectRef.regeneratorRuntime = require('babel-runtime/regenerator');

import util from './util';
import fetch from '@system.fetch';
import storage from '@system.storage';
import router from '@system.router';
import shortcut from '@system.shortcut';
import prompt from '@system.prompt';


const HOST = 'http://59.110.143.218';
export default {

    showMenu: util.showMenu,
    createShortcut: util.createShortcut,
	
	onCreate() {
		console.log('on create!');
		storage.get({
			key: 'history',
			success: result => {
				if(result && result != '') {
					let s = JSON.parse(result);
					for(let i in s) {
						this.$data.history[i] = s[i];
					}
				} else {
					this.$data.history = {
						bookId: -1,
						chapterId: -1,
						chapterName: '',
						paragraphIndex: 0,
						paragraphTotal: 0,
					};
				}
			}
		});

		storage.get({
			key: 'setting',
			success: result => {
				if(result && result != '') {
					let s = JSON.parse(result);
					for(let i in s) {
						this.$data.setting[i] = s[i];
					}
				}
			}
		});

		storage.get({
			key: 'installedCheckedDate',
			success: result => {
				if(result && result != '') {
					this.$data.installedCheckedDate = JSON.parse(result);
				}
			}
		});
	},

	onDestroy() {
		console.log('on destroy.');

		storage.set({
			key: 'history',
			value: JSON.stringify(this.$data.history),
		});
		storage.set({
			key: 'setting',
			value: JSON.stringify(this.$data.setting),
		});
		storage.set({
			key: 'installedCheckedDate',
			value: JSON.stringify(this.$data.installedCheckedDate),
		});
		
	},

	shortcutInstall() {
		//创建桌面图标
		shortcut.hasInstalled({
			success: result => {
				console.log('has install? ', result);
				if(!result) {
					this.installDailog();
				}
			},
			fail: result => {
				this.installDailog();
			}
		});
	},

	installDailog() {
		prompt.showDialog({
			message: '为了更方便的看小说，是否添加桌面图标？',
			buttons: [
				{ text: '添加图标', color: '#4169E1' },
				{ text: '', color: '#cccccc' },
				{ text: '再用用看', color: '#cccccc' },
			],
			success: data => {
				console.log('success handing.', data.index);
				if(data.index == 0) {
					shortcut.install({
						success: result => {
							prompt.showToast({
								message: '已经为您创建桌面图标。'
							});
						},
						fail: result => {
							prompt.showToast({
								message: '创建桌面图标失败。'
							});
						}
					});
				}
			},
		});
	},

	setHistory(bookId, options) {
		this.$data.history[bookId.toString()] = options;
	},

	getHistory() {
		return this.$data.history;
	},

    myFetch(config) {
      return new Promise((resolve, reject) => {
        let myconfig = config || {};
		myconfig.method = 'post';
        myconfig.success = function(data) {
          let result = JSON.parse(data.data);
          if(data.code !== 200) {
            reject('Response code is not 200.');
          } else if(result.error.returnCode !== 0) {
            reject(result.error.returnUserMessage);
          } else {
            resolve(result.data);
          }
        };
        myconfig.fail = function(data, code) {
          reject(code);
        };
		// console.log('Request url: ', config.url);
		// console.log('Request params: ', JSON.stringify(config.data));
        fetch.fetch(myconfig);
      })
    },
    
    fetchBookList() {
		// console.log('Get Booklist.');
		return this.myFetch({
			url: HOST + '/novels/get-book-list'
		});
    },
    fetchChapters(bookId) {
		console.log('Get Chapters id=' + bookId + '.');
		return this.myFetch({
			url: HOST + '/novels/get-chapters',
			data: {
				bookId: parseInt(bookId)
			},
		});
    },
    fetchContentInChapter(bookId, chapterId) {
		console.log('Get Content. bookId=' + bookId + '&chapterId=' + chapterId + '.');
		return this.myFetch({
			url: HOST + '/novels/get-content-in-chapters',
			data: {
				bookId: parseInt(bookId),
				chapterId: parseInt(chapterId),
			}
		});
    },
	initChapters(bookId) {
		return new Promise((resolve, reject) => {
			this.fetchChapters(bookId).then(result => {
				// console.log(JSON.stringify(result));
				resolve({
					bookId: bookId,
					chapters: result,
				});
			}).catch(e => reject(e));
		});
	},
    initChapterContent(bookId, chapterId) {
		return new Promise((resolve, reject) => {
			this.fetchContentInChapter(bookId, chapterId).then(c => {
				if(c === '' || !c) {
					reject();
				} else {
					let content = c['content'].slice(0);
					content.unshift(c['title']);
					resolve({
						chapterId: chapterId,
						title: c['title'],
						content: content,
					});
				}
			}).catch(e => reject(e));
		});
    },

	openChapterPage(bookId, bookName, chapterId) {
		router.push({
			uri: '/BookDetail',
			params: {
				bookId: bookId,
				bookName: bookName,
				chapterId: chapterId,
			}
		});
	},

	replaceChapterPage(bookId, chapterId) {
		router.replace({
			uri: '/BookDetail',
			params: {
				bookId: bookId,
				chapterId: chapterId,
			}
		});
	},

	getChapterNameById(id, chapters) {
		let name = '';
		for(let i = 0; i < chapters.length; i ++) {
			if(chapters[i]['chapterId'] === id) {
				name = chapters[i]['name'];
				break;
			} else {
				continue;
			}
		}
		return name;
	}


	
}
</script>